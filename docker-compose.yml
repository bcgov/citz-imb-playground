version: '3.8'

services:
  # Application Services
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
      target: ${DOCKER_TARGET:-production}
    container_name: typeracer-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3001
      # Sentry configuration (optional)
      - SENTRY_DSN=${BACKEND_SENTRY_DSN:-}
      - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT:-production}
    volumes:
      - backend-uploads:/app/packages/backend/uploads
      # Development mode: mount source for hot reload when DEV_MODE=true
      - ${PWD}:/app:${DEV_MOUNT:-ro}
    networks:
      - app-network
      - sentry
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    working_dir: /app/packages/backend
    command: ${BACKEND_CMD:-npm start}

  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
      target: ${DOCKER_TARGET:-production}
    container_name: typeracer-frontend
    ports:
      - "3000:${FRONTEND_PORT:-80}"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      # Sentry configuration (optional)
      - REACT_APP_SENTRY_DSN=${FRONTEND_SENTRY_DSN:-}
      - REACT_APP_SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT:-production}
      # Development environment variables
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING:-false}
      - WDS_SOCKET_HOST=${WDS_SOCKET_HOST:-}
    volumes:
      # Development mode: mount source for hot reload when DEV_MODE=true
      - ${PWD}:/app:${DEV_MOUNT:-ro}
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped
    working_dir: /app/packages/frontend
    command: ${FRONTEND_CMD:-nginx -g 'daemon off;'}

  # Sentry Services (for monitoring)
  redis:
    image: redis:7-alpine
    container_name: sentry-redis
    volumes:
      - sentry-redis:/data
    networks:
      - sentry
    restart: unless-stopped
    profiles:
      - sentry
      - full

  postgres:
    image: postgres:14
    container_name: sentry-postgres
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: sentry
      POSTGRES_DB: sentry
    volumes:
      - sentry-postgres:/var/lib/postgresql/data
    networks:
      - sentry
    restart: unless-stopped
    profiles:
      - sentry
      - full

  sentry-base:
    image: sentry:latest
    container_name: sentry-base
    depends_on:
      - redis
      - postgres
    environment:
      SENTRY_SECRET_KEY: 'your-secret-key-here-change-this-in-production'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_POSTGRES_PORT: 5432
      SENTRY_DB_NAME: sentry
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_REDIS_HOST: redis
      SENTRY_REDIS_PORT: 6379
    volumes:
      - sentry-data:/var/lib/sentry/files
    networks:
      - sentry
    restart: unless-stopped
    profiles:
      - sentry
      - full

  sentry-cron:
    extends:
      service: sentry-base
    container_name: sentry-cron
    command: run cron
    profiles:
      - sentry
      - full

  sentry-worker:
    extends:
      service: sentry-base
    container_name: sentry-worker
    command: run worker
    profiles:
      - sentry
      - full

  sentry-web:
    extends:
      service: sentry-base
    container_name: sentry-web
    ports:
      - "9000:9000"
    command: run web
    profiles:
      - sentry
      - full

volumes:
  backend-uploads:
  sentry-data:
  sentry-postgres:
  sentry-redis:

networks:
  app-network:
    driver: bridge
  sentry:
    driver: bridge
